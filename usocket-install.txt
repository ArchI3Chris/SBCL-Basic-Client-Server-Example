This is one of the problems I ran into. Finding out how to actually install libraries. Because for some reason people don't seem to find it important to explain the basics first. Like for example how to save Lisp apps in files and load them before you actually create a game!

Sorry... Let's go:

To use usocket with SBCL, you are likely going to have to install it. And to install it, the easiest way is probably QuickLisp, which is like a package management system for Lisp.

To install QuickLisp, download the quicklisp.lisp file:

curl -O https://beta.quicklisp.org/quicklisp.lisp

Note: curl is just an example. It doesn't matter if you do it directly in your browser, use wget or whatever your favorite option is.

Once that is done, fire up SBCL and load the file (make sure you are in the correct directory!):

sbcl --load quicklisp.lisp

You are going to see further instructions. Also in case you need help, you might want to visit quicklisp.org.

Install QuickLisp:

(quicklisp-quickstart:install)

Meanwhile I've found out, that QuickLisp seems to install in my user directory.

Now, the idea would be, to make sure QuickLisp gets loaded autoamtically with SBCL by doing this next:

(ql:add-to-init-file)

While this one would add QuickLisp to .sbclrc, .sbclrc does NOT get loaded by SBCL automatically. In the scripts you can see, that I load the file manually.

Meaningwhile I've switched to actually taking over the QuickLisp folder to the project folder and loading the setup file directly. Which is what is usually done by the entry in the .sbclrc file. Therefore I also just copy the basic QuickLisp folder to new projects.

Note: in the projects, files for the modules are obviously going to be added. So, you might want to keep a basic template for QuickLisp alone to avoid bloat and unnecessary files. If you actually want the modules of a project to be taken over to another, you can of course take them over from other projects too.

Last step, you need to install usocket:

(ql:quickload "usocket")

That's all there is and you can leave the interpreter with the usual

(quit)

That's it.
